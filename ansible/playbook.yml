---
# Login user as `root`
- hosts: webservers
  vars:
    username: "{{ lookup('env', 'CI_PROJECT_NAMESPACE') }}"

    app_name: "{{ lookup('env', 'CI_PROJECT_NAME') }}"
    app_repo: "{{ lookup('env', 'CI_PROJECT_URL') }}"
    app_root: "/home/{{ username }}/{{ app_name }}"

    db_name:  "{{username | regex_replace('\\W+') }}_{{app_name | regex_replace('\\W+') }}"
    db_user:  "{{username}}"
    db_pass:  "{{ lookup('env', 'DATABASE_PASSWORD') | default('qwerty', true) }}"

  tasks:
  - name: Create user
    user:
      name:    "{{username}}"
      comment: "Gitlab-CI auto-create user"
      group:   admin
      shell:   /bin/bash

  - name: Checkout repository
    become: yes
    become_user: "{{username}}"
    git:
      repo: "{{app_repo}}"
      dest: "{{app_root}}"
      force: true
      accept_hostkey: true
      version: "{{ lookup('env', 'CI_COMMIT_SHA') | default('HEAD', true) }}"
    notify:
    - restart app

  - name: Install pip dependencies
    become: yes
    become_user: "{{username}}"
    pip:
      chdir: "{{app_root}}"
      requirements: "./requirements.txt"
      virtualenv:   "{{app_root}}/.venv"
      virtualenv_python: python3.6
    notify:
    - restart app

  # SHOW DATABASES;
  # SELECT DATABASE();
  - name: Create a new MySQL Database
    mysql_db:
      name:   "{{db_name}}"
      state:  present
    when: lookup('env', 'REQUIRE_DB') == 'MySQL'

  # SELECT User, Host FROM mysql.user;
  # SELECT * FROM mysql.user\G;
  # DESC mysql.user;
  #
  # SELECT USER();
  # SELECT CURRENT_USER();
  #
  # SHOW GRANTS FOR 'root'@'localhost';
  # SHOW GRANTS;
  # SHOW GRANTS FOR CURRENT_USER;
  # SHOW GRANTS FOR CURRENT_USER();
  - name: Create MySQL user
    mysql_user:
      name:         "{{db_user}}"
      password:     "{{db_pass}}"
      priv:         "{{db_name}}.*:ALL"
      append_privs: yes
      state:        present
    when: lookup('env', 'REQUIRE_DB') == 'MySQL'

  - name: Config app
    become: yes
    become_user: "{{username}}"
    template:
      src:  "../instance/config.py.j2"
      dest: "{{app_root}}/instance/config.py"
      force: yes
    notify:
    - restart app

  - name: Config supervisor
    template:
      src:  "templates/supervisor-worker.conf.j2"
      dest: "/etc/supervisor/conf.d/{{app_name}}@{{username}}.conf"
      force: yes
    notify:
    - restart app

  - name: Config nginx
    template:
      src:  "templates/nginx-sites.conf.j2"
      dest: "/etc/nginx/sites-enabled/{{app_name}}@{{username}}.conf"
      force: yes
    notify:
    - restart nginx

  handlers:
  # ===== SETUP INSTRUCTIONS =====
  # NOTE:
  #   Subprocess inherit environment when “supervisord” start, NOT program start
  #   so, we need `source .venv/bin/activate` before `supervisord`
  #   and hard to config different environment for each program :(
  #
  # SOLUTION 01: Each supervisord per program
  #   Disable supervisor service
  #   $ sudo systemctl disable supervisor
  #   Run supervisor manually with command:
  #   $ cd /path/to/your/project/dir
  #   $ source .venv/bin/activate
  #   $ supervisord
  # SOLUTION 02: Wrap serve command in `run.sh` file
  #  So, instead of run `flask run` or `gunicorn main:app`
  #  we run `./run.sh`
  # ==============================
  - name: restart app
    supervisorctl:
      name: "{{app_name}}@{{username}}:"
      state: restarted

  - name: restart nginx
    service: name=nginx state=restarted
